{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","error","city","country","temp","src","concat","icon","alt","description","temp_max","temp_min","sunrise","sunset","wind","pressure","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","date_sunrise","date_sunset","sunrise_date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","_this","setState","abrupt","fetch","sent","json","console","log","cod","message","sys","Date","getHours","getMinutes","getSeconds","main","speed","weather","stop","className","this","class","components_Info","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c729ad37.chunk.js","sourcesContent":["import React from 'react';\r\nconst Info = () => (\r\n  <div>\r\n  <h2>Погода на сьогодні</h2>\r\n  <p>Дізнайтеся погоду у вашому місті</p>\r\n</div>\r\n)\r\n\r\nexport default Info;","import React from 'react';\r\nconst Form = props => (\r\n      <form onSubmit={props.weatherMethod}>\r\n        <input type='text' name='city' placeholder='Місто'/>\r\n        <button>Показати погоду у Вашому місті</button>\r\n      </form>\r\n    );\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div>\r\n    {!props.error && (\r\n      <div>\r\n        <p>\r\n          Місто: {props.city}, {props.country}\r\n        </p>\r\n        <p>\r\n          Температура: {props.temp} &deg;C\r\n          <img\r\n            src={`https://openweathermap.org/img/w/${props.icon}.png`}\r\n            alt={props.description}\r\n          />\r\n        </p>\r\n        <p>Максимальна температура: {props.temp_max} &deg;C</p>\r\n        <p>Мінімальна температура: {props.temp_min} &deg;C</p>\r\n        <p>Схід сонця: {props.sunrise}</p>\r\n        <p>Захід сонця: {props.sunset}</p>\r\n        <p>Швидкість вітру: {props.wind} м/с</p>\r\n        <p>Атмосферний тиск: {props.pressure} мм</p>\r\n      </div>\r\n    )}\r\n    <p>{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"92227cb224fe62b02239223cb3a3c7ab\";\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    temp_min: undefined,\n    temp_max: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: \"Виберіть місто\",\n    icon: \"icon\",\n    wind: undefined,\n    pressure: undefined,\n    description: undefined\n  };\n\n  gettingWeather = async e => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n\n    if (!city) {\n      this.setState({\n        error: \"Виберіть місто\"\n      });\n      return;\n    }\n\n    const api_url = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const data = await api_url.json();\n    console.log(data);\n    if (data.cod === \"404\") {\n      this.setState({ error: data.message });\n      return;\n    }\n\n    var sunrise = data.sys.sunrise;\n    var sunset = data.sys.sunset;\n\n    var date_sunrise = new Date(sunrise * 1000);\n    var date_sunset = new Date(sunset * 1000);\n\n    var sunrise_date =\n      date_sunrise.getHours() +\n      \":\" +\n      date_sunrise.getMinutes() +\n      \":\" +\n      date_sunrise.getSeconds();\n\n    var sunset_date =\n      date_sunset.getHours() +\n      \":\" +\n      date_sunset.getMinutes() +\n      \":\" +\n      date_sunset.getSeconds();\n\n    this.setState({\n      temp: data.main.temp,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      city: data.name,\n      country: data.sys.country,\n      sunrise: sunrise_date,\n      sunset: sunset_date,\n      wind: data.wind.speed,\n      pressure: data.main.pressure,\n      icon: data.weather[0].icon,\n      description: data.weather[0].description,\n      error: undefined\n    });\n  };\n\n  render() {\n    return (\n      <div className={`icon-${this.state.icon}`}>\n        <div className=\"container\">\n        <div className=\"wrapper\">\n          <div className=\"row\">\n              <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n                <Info />\n                <Form weatherMethod={this.gettingWeather} />\n              </div>\n              <div class=\"col-xs-8 col-sm-8 col-md-8 col-lg-8\">\n                <Weather {...this.state} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}